name: Dohoda CMake build action

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MinGW",
              artifact: "windows.tar.xz",
              os: windows-latest,
              cc: "gcc",
              cxx: "g++",
            }
          - {
              name: "Ubuntu Latest GCC",
              artifact: "ubuntu.tar.xz",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
            }
          - {
              name: "macOS Latest Clang",
              artifact: "macos.tar.xz",
              os: macos-latest,
              cc: "clang",
              cxx: "clang++",
            }
    steps:
      - name: "Checkout üöö"
        uses: actions/checkout@v3
      - name: "Ninja ü•∑"
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Konfigurace üöÄ
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          if ("${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -G Ninja
                -D CMAKE_MAKE_PROGRAM=ninja
                -D BUILD_TESTS=off
              RESULT_VARIABLE result
            )
          else()
            execute_process(
              COMMAND cmake
                -S .
                -B build
                -G Ninja
                -D CMAKE_MAKE_PROGRAM=ninja
                -D BUILD_TESTS=on
              RESULT_VARIABLE result
            )
          endif()
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
      - name: Build üî®
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          execute_process(
                COMMAND cmake --build build
                RESULT_VARIABLE result
                OUTPUT_VARIABLE output
                ERROR_VARIABLE output
                ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
              )
              if (NOT result EQUAL 0)
                string(REGEX MATCH "FAILED:.*$" error_message "${output}")
                string(REPLACE "\n" "%0A" error_message "${error_message}")
                message("::error::${error_message}")
                message(FATAL_ERROR "Build failed")
              endif()
      - name: Testy üî®
        if: runner.os != 'windows-latest'
        shell: cmake -P {0}
        run: |
          execute_process(
            COMMAND ctest
            WORKING_DIRECTORY build
            RESULT_VARIABLE result
            OUTPUT_VARIABLE output
            ERROR_VARIABLE output
            ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
          )
          if (NOT result EQUAL 0)
            string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
            string(REPLACE "\n" "%0A" test_results "${test_results}")
            message("::error::${test_results}")
            message(FATAL_ERROR "Running tests failed!")
          endif()
      - name: Strip artefakt≈Ø a instalace üî•
        run: cmake --install build --prefix instdir --strip
      - name: Zabalen√≠ artefakt≈Ø do tar.xz üì¶
        working-directory: instdir
        run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .
      - name: Upload üçî
        uses: actions/upload-artifact@v3
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}
